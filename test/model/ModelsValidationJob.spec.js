/*
 * SendVerify API
 * Improve deliverability of your email list by automatically cleaning all emails before sending to them. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.43
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SendVerifyApi);
  }
}(this, function(expect, SendVerifyApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ModelsValidationJob', function() {
      beforeEach(function() {
        instance = new SendVerifyApi.ModelsValidationJob();
      });

      it('should create an instance of ModelsValidationJob', function() {
        // TODO: update the code to test ModelsValidationJob
        expect(instance).to.be.a(SendVerifyApi.ModelsValidationJob);
      });

      it('should have the property created (base name: "created")', function() {
        // TODO: update the code to test the property created
        expect(instance).to.have.property('created');
        // expect(instance.created).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property processed (base name: "processed")', function() {
        // TODO: update the code to test the property processed
        expect(instance).to.have.property('processed');
        // expect(instance.processed).to.be(expectedValueLiteral);
      });

      it('should have the property resultInvalidPath (base name: "resultInvalidPath")', function() {
        // TODO: update the code to test the property resultInvalidPath
        expect(instance).to.have.property('resultInvalidPath');
        // expect(instance.resultInvalidPath).to.be(expectedValueLiteral);
      });

      it('should have the property resultPath (base name: "resultPath")', function() {
        // TODO: update the code to test the property resultPath
        expect(instance).to.have.property('resultPath');
        // expect(instance.resultPath).to.be(expectedValueLiteral);
      });

      it('should have the property resultValidPath (base name: "resultValidPath")', function() {
        // TODO: update the code to test the property resultValidPath
        expect(instance).to.have.property('resultValidPath');
        // expect(instance.resultValidPath).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property total (base name: "total")', function() {
        // TODO: update the code to test the property total
        expect(instance).to.have.property('total');
        // expect(instance.total).to.be(expectedValueLiteral);
      });

      it('should have the property updated (base name: "updated")', function() {
        // TODO: update the code to test the property updated
        expect(instance).to.have.property('updated');
        // expect(instance.updated).to.be(expectedValueLiteral);
      });

    });
  });

}));
